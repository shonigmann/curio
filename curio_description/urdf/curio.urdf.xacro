<?xml version="1.0" ?>
<!-- 
    Software License Agreement (BSD-3-Clause)

    Copyright (c) 2019 Rhys Mainwaring
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met-

    1.  Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    2.  Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution.

    3.  Neither the name of the copyright holder nor the names of its
        contributors may be used to endorse or promote products derived
        from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
-->

<!-- Robot description for Curio, a Sawppy Rover robot. -->
<robot name="curio" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Include macros for materials, inertials, sensors -->
    <xacro:include filename="$(find curio_description)/urdf/curio_materials.xacro"/>
    <xacro:include filename="$(find curio_description)/urdf/curio_inertials.xacro"/>
    <xacro:include filename="$(find curio_description)/urdf/curio_laser.xacro"/>
    <xacro:include filename="$(find curio_description)/urdf/curio_realsense.xacro"/>

    <!--    Sensor Selection  -->
    <xacro:property name="sensor_type" value="L515" />  <!-- Must be one of {RPLidar, PuckLITE, D435i, L515} -->

    <!--     Gazebo plugins -->
    <gazebo>
        <!-- ROS Control -->

        <!--            Wheel joints controlled by ackermann_drive_controller- -->
        <!--                front_left_wheel_joint, front_right_wheel_joint,-->
        <!--                mid_left_wheel_joint, mid_right_wheel_joint,-->
        <!--                back_left_wheel_joint, back_right_wheel_joint-->

        <!--            Steer joints controlled by ackermann_drive_controller- -->
        <!--                front_left_corner_joint, front_right_corner_joint,-->
        <!--                back_left_corner_joint, back_right_corner_joint,-->
        <!--        &ndash;&gt;-->

        <!--        TODO- REPLACE WITH GAZEBO ROS CONTROL ONCE ACKERMANN CONTROLLER IS IMPLEMENTED.
                          SEE- github.com/ros-controls/ros2_controllers/issues/194-->
        <!--        ORIGINAL-->
        <!--        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">-->
        <!--            <robotNamespace>/</robotNamespace>-->
        <!--            <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>-->
        <!--            <legacyModeNS>false</legacyModeNS>-->
        <!--        </plugin>-->

        <!--        ROS2 UPDATE-->
        <!--        <gazebo>-->
        <!--            <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">-->
        <!--&lt;!&ndash;                <parameters>$(find gazebo_ros2_control_demos)/config/cartpole_controller.yaml</parameters>&ndash;&gt;-->
        <!--            </plugin>-->
        <!--        </gazebo>-->

        <!--        GAZEBO PLUGIN REPLACEMENT-->
        <!--        <plugin name='ackermann_drive' filename="libgazebo_ros_ackermann_drive.so">-->
        <!--&lt;!&ndash;            <ros>&ndash;&gt;-->
        <!--&lt;!&ndash;              <namespace>/curio</namespace>&ndash;&gt;-->
        <!--&lt;!&ndash;              <remapping>cmd_vel:=cmd_demo</remapping>&ndash;&gt;-->
        <!--&lt;!&ndash;              <remapping>odom:=odom_demo</remapping>&ndash;&gt;-->
        <!--&lt;!&ndash;              <remapping>distance:=distance_demo</remapping>&ndash;&gt;-->
        <!--&lt;!&ndash;            </ros>&ndash;&gt;-->

        <!--            <update_rate>50.0</update_rate>-->

        <!--            &lt;!&ndash; wheels &ndash;&gt;-->
        <!--            <front_left_joint>front_left_wheel_joint</front_left_joint>-->
        <!--            <front_right_joint>front_right_wheel_joint</front_right_joint>-->
        <!--            <rear_left_joint>back_left_wheel_joint</rear_left_joint>-->
        <!--            <rear_right_joint>back_right_wheel_joint</rear_right_joint>-->
        <!--            <left_steering_joint>front_left_corner_joint</left_steering_joint>-->
        <!--            <right_steering_joint>front_right_corner_joint</right_steering_joint>-->
        <!--&lt;!&ndash;            <steering_wheel_joint></steering_wheel_joint>&ndash;&gt;-->

        <!--            &lt;!&ndash; Max absolute steer angle for tyre in radians&ndash;&gt;-->
        <!--            &lt;!&ndash; Any cmd_vel angular z greater than this would be capped &ndash;&gt;-->
        <!--            <max_steer>${math_pi/3}</max_steer>-->

        <!--            &lt;!&ndash; Max absolute steering angle of steering wheel &ndash;&gt;-->
        <!--            <max_steering_angle>7.85</max_steering_angle>-->

        <!--            &lt;!&ndash; Max absolute linear speed in m/s &ndash;&gt;-->
        <!--            <max_speed>0.37</max_speed>-->

        <!--            &lt;!&ndash; PID tuning &ndash;&gt;-->
        <!--            <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>-->
        <!--            <left_steering_i_range>0 0</left_steering_i_range>-->
        <!--            <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>-->
        <!--            <right_steering_i_range>0 0</right_steering_i_range>-->
        <!--            <linear_velocity_pid_gain>1000 0 1</linear_velocity_pid_gain>-->
        <!--            <linear_velocity_i_range>0 0</linear_velocity_i_range>-->

        <!--            &lt;!&ndash; output &ndash;&gt;-->
        <!--            <publish_odom>true</publish_odom>-->
        <!--            <publish_odom_tf>true</publish_odom_tf>-->
        <!--            <publish_wheel_tf>true</publish_wheel_tf>-->
        <!--            <publish_distance>true</publish_distance>-->

        <!--            <odometry_frame>/odom</odometry_frame>-->
        <!--            <odometry_frame>/odom</odometry_frame>-->
        <!--            <robot_base_frame>base_link</robot_base_frame>-->

        <!--        </plugin>-->
        <!--        END TODO-->

        <!-- Publish state of passive joints

            Gazebo only links-
                left_turnbuckle_link, right_turnbuckle_link

            Gazebo only joints-
                back_left_turnbuckle_joint, back_right_turnbuckle_joint,
                front_left_turnbuckle_joint, front_right_turnbuckle_joint

            Resources-
                http://answers.gazebosim.org/question/13844/getting-joint-angles-for-passive-urdf-model/
         -->
        <plugin name="gazebo_ros_joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
            <!--                <robotNamespace>/</robotNamespace>-->
            <joint_name>left_rocker_joint</joint_name>
            <joint_name>right_rocker_joint</joint_name>
            <joint_name>left_bogie_joint</joint_name>
            <joint_name>right_bogie_joint</joint_name>
            <joint_name>diff_brace_joint</joint_name>

            <joint_name>front_right_turnbuckle_joint</joint_name>
            <joint_name>front_right_wheel_joint</joint_name>
            <joint_name>front_right_corner_joint</joint_name>

            <joint_name>front_left_turnbuckle_joint</joint_name>
            <joint_name>front_left_wheel_joint</joint_name>
            <joint_name>front_left_corner_joint</joint_name>

            <joint_name>back_right_turnbuckle_joint</joint_name>
            <joint_name>back_right_wheel_joint</joint_name>
            <joint_name>back_right_corner_joint</joint_name>

            <joint_name>back_left_turnbuckle_joint</joint_name>
            <joint_name>back_left_wheel_joint</joint_name>
            <joint_name>back_left_corner_joint</joint_name>

            <joint_name>mid_right_wheel_joint</joint_name>
            <joint_name>mid_left_wheel_joint</joint_name>

            <update_rate>50</update_rate>
            <always_on>true</always_on>
            <!--            TODO- determine if namespace or remapping is necessary-->
            <ros>
                <!--                    <namespace>/curio</namespace> -->
                <remapping>~/out:=joint_states</remapping>
            </ros>
        </plugin>

    </gazebo>

    <!-- Chassis -->
    <xacro:property name="makerbeam_width" value="0.015" />
    <xacro:property name="makerbeam_depth" value="0.015" />
    <xacro:property name="makerbeam_density" value="0.100" />

    <xacro:property name="body_box_length" value="0.425" />
    <xacro:property name="body_box_width" value="0.285" />
    <xacro:property name="body_box_depth" value="0.093" />
    <xacro:property name="body_box_mass" value="1.0" />

    <xacro:property name="body_mast_mount_length" value="0.0927" />
    <xacro:property name="body_mast_mount_width" value="0.0927" />
    <xacro:property name="body_mast_mount_depth" value="0.025" />
    <xacro:property name="body_mast_mount_mass" value="0.03" />

    <xacro:property name="body_mast_length" value="0.2" />
    <xacro:property name="body_mast_radius" value="0.01375" />
    <xacro:property name="body_mast_mass" value="0.03" />

    <xacro:property name="front_rocker_arm_length" value="0.182" />
    <xacro:property name="back_rocker_arm_length" value="0.161" />
    <xacro:property name="front_rocker_arm_angle" value="0.3490658503988659" />
    <xacro:property name="back_rocker_arm_angle" value="-0.3141592653589793" />

    <xacro:property name="front_bogie_arm_length" value="0.122" />
    <xacro:property name="back_bogie_arm_length" value="0.117" />
    <xacro:property name="front_bogie_arm_angle" value="0.5201081170943103" />
    <xacro:property name="back_bogie_arm_angle" value="0.25656340004316625" />

    <xacro:property name="wheel_width" value="0.100" />
    <xacro:property name="wheel_radius" value="0.060" />

    <!--virtual base link to avoid KML warnings of base link having inertial properties-->
    <link name="dummy_base_link"/>
    <joint name="dummy_base_joint" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <parent link="dummy_base_link" />
        <child link="base_link" />
    </joint>

    <!-- The base link - the reference link for the entire model -->
    <link name="base_link">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
            <material name="orange" />
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="0.01 0.01 0.01"/>
            </geometry>
        </collision>
        <xacro:solid_cuboid_inertial
                rpy="0 0 0" xyz="0 0 0"
                mass="0.01"
                x="0.01" y="0.01" z="0.01" />
    </link>

    <gazebo reference="base_link">
        <material>Gazebo/Orange</material>
    </gazebo>

    <link name="body_box_link">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <mesh filename="file://$(find curio_description)/meshes/bases/body_box.stl" />
                <!-- <box size="${body_box_length} ${body_box_width} ${body_box_depth}"/> -->
            </geometry>
            <material name="dark_gray" />
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="${body_box_length} ${body_box_width} ${body_box_depth}"/>
            </geometry>
        </collision>
        <xacro:solid_cuboid_inertial
                rpy="0 0 0" xyz="0 0 0"
                mass="${body_box_mass}"
                x="${body_box_length}" y="${body_box_width}" z="${body_box_depth}" />
    </link>

    <gazebo reference="body_box_link">
        <material>Gazebo/DarkGray</material>
    </gazebo>

    <joint name="body_box_joint" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <parent link="base_link" />
        <child link="body_box_link" />
    </joint>

    <gazebo reference="body_box_joint">
        <!-- <disableFixedJointLumping>true</disableFixedJointLumping>  -->
        <!-- <preserveFixedJoint>true</preserveFixedJoint> -->
    </gazebo>

    <!--    ONLY INCLUDE MAST IF USING PuckLITE, D435i, or L515 sensors; RPLidar is mounted directly to the body -->
    <xacro:if value="${sensor_type == 'PuckLITE' or sensor_type == 'D435i' or sensor_type == 'L515'}">
        <link name="body_mast_mount_link">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <mesh filename="file://$(find curio_description)/meshes/bases/body_mast_mount.stl" />
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <box size="${body_mast_mount_length} ${body_mast_mount_width} ${body_mast_mount_depth}"/>
                </geometry>
            </collision>
            <xacro:solid_cuboid_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="${body_mast_mount_mass}"
                    x="${body_mast_mount_length}" y="${body_mast_mount_width}" z="${body_mast_mount_depth}" />
        </link>

        <gazebo reference="body_mast_mount_link">
            <material>Gazebo/Gray</material>
        </gazebo>

        <joint name="body_mast_mount_joint" type="fixed">
            <origin rpy="0 0 ${math_pi}" xyz="0.167 0.099 0.043"/>
            <parent link="body_box_link" />
            <child link="body_mast_mount_link" />
        </joint>

        <link name="body_mast_link">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <cylinder radius="${body_mast_radius}" length="${body_mast_length}"/>
                </geometry>
                <material name="dark_gray" />
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <cylinder radius="${body_mast_radius}" length="${body_mast_length}"/>
                </geometry>
            </collision>
            <xacro:solid_cylinder_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="${body_mast_mass}"
                    radius="${body_mast_radius}" length="${body_mast_length}" />
        </link>
        <gazebo reference="body_mast_link">
            <material>Gazebo/DarkGray</material>
        </gazebo>
        <joint name="body_mast_joint" type="fixed">
            <origin rpy="0 0 0" xyz="0.0065 0.006 ${body_mast_length/2-0.0125}"/>
            <parent link="body_mast_mount_link" />
            <child link="body_mast_link" />
        </joint>
    </xacro:if>

    <!-- Differential -->
    <link name="diff_brace_link">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <!-- <origin rpy="0 0 ${math_pi_over_2}" xyz="0 0 0" /> -->
            <geometry>
                <mesh filename="file://$(find curio_description)/meshes/bases/differential.stl" />
                <!-- <box size="0.200 0.015 0.015"/> -->
            </geometry>
            <material name="gray" />
        </visual>
        <collision>
            <origin rpy="0 0 ${math_pi_over_2}" xyz="0 0 0" />
            <geometry>
                <box size="0.200 0.015 0.015"/>
            </geometry>
        </collision>
        <xacro:solid_cuboid_inertial
                rpy="0 0 ${math_pi_over_2}" xyz="0 0 0"
                mass="0.1"
                x="0.2" y="0.015" z="0.015" />
    </link>

    <gazebo reference="diff_brace_link">
        <material>Gazebo/Gray</material>
    </gazebo>

    <joint name="diff_brace_joint" type="revolute">
        <origin rpy="0 0 0" xyz="0 0 0.0681"/>
        <axis xyz="0 0 1" />
        <limit
                lower="${-math_pi_over_4}"
                upper="${math_pi_over_4}"
                effort="100.0"
                velocity="100.0" />
        <parent link="base_link" />
        <child link="diff_brace_link" />
    </joint>

    <gazebo reference="diff_brace_joint">
        <provideFeedback>true</provideFeedback>
        <implicitSpringDamper>true</implicitSpringDamper>
        <!-- <springStiffness>100.0</springStiffness> -->
        <!-- <springReference>0.0</springReference> -->
    </gazebo>

    <!-- Turnbuckle linkages between the differential and rockers
    
        Note- URDF does not support closed loops in the robot description,
        whereas SDF for Gazebo does.

        These links and joints are for Gazebo only and close the kinematic chain
        for the differential.
    -->
    <xacro:macro name="turnbuckle_assembly" params="lat_label reflect">
        <gazebo>
            <link name="${lat_label}_turnbuckle_link">
                <pose>0.0375 ${reflect * 0.165} 0.07 0 -0.08 ${-reflect * 0.15}</pose>
                <visual name="${lat_label}_turnbuckle_visual">
                    <pose>0 0 0 0 0 0</pose>
                    <geometry>
                        <mesh>
                            <uri>file://$(find curio_description)/meshes/bases/turnbuckle.stl</uri>
                        </mesh>
                        <!-- <cylinder>
                            <length>0.07</length>
                            <radius>0.0025</radius>
                        </cylinder> -->
                    </geometry>
                    <material>
                        <script>Gazebo/Blue</script>
                    </material>
                </visual>
                <collision name="${lat_label}_turnbuckle_collision">
                    <pose>0 0 0 0 ${math_pi_over_2} 0</pose>
                    <geometry>
                        <cylinder>
                            <length>0.07</length>
                            <radius>0.0025</radius>
                        </cylinder>
                    </geometry>
                </collision>
                <inertial>
                    <mass>0.01</mass>
                    <inertia>
                        <ixx>0.0001</ixx>
                        <ixy>0</ixy>
                        <ixz>0</ixz>
                        <iyy>0.0001</iyy>
                        <iyz>0</iyz>
                        <izz>0.0001</izz>
                    </inertia>
                </inertial>
            </link>

            <joint name="back_${lat_label}_turnbuckle_joint" type="ball">
                <pose>-0.035 0 0 0 0 0</pose>
                <parent>diff_brace_link</parent>
                <child>${lat_label}_turnbuckle_link</child>
            </joint>

            <joint name="front_${lat_label}_turnbuckle_joint" type="ball">
                <pose>0.035 0 0 0 0 0</pose>
                <parent>${lat_label}_rocker_link</parent>
                <child>${lat_label}_turnbuckle_link</child>
            </joint>
        </gazebo>
        <gazebo reference="${lat_label}_turnbuckle_link">
            <material>Gazebo/Blue</material>
        </gazebo>
    </xacro:macro>
    <xacro:turnbuckle_assembly lat_label="left" reflect="1"/>
    <xacro:turnbuckle_assembly lat_label="right" reflect="-1"/>



    <!-- Rocker -->
    <xacro:macro name="rocker_link" params="lat_label reflect">
        <link name="${lat_label}_rocker_link">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <mesh filename="file://$(find curio_description)/meshes/bases/${lat_label}_rocker_asm.stl" />
                    <!-- <box size="0.1 0.015 0.015"/> -->
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <box size="0.1 0.015 0.015"/>
                </geometry>
            </collision>
            <xacro:solid_cuboid_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="0.25"
                    x="0.1" y="0.015" z="0.015" />
        </link>

        <gazebo reference="${lat_label}_rocker_link">
            <material>Gazebo/Gray</material>
        </gazebo>

    </xacro:macro>
    <xacro:rocker_link lat_label="left" reflect="1"/>
    <xacro:rocker_link lat_label="right" reflect="-1"/>

    <!-- Rocker Joint  -->
    <xacro:macro name="rocker_joint" params="lat_label reflect">
        <joint name="${lat_label}_rocker_joint" type="continuous">
            <origin rpy="0 0 0" xyz="0.071 ${reflect * 0.155} 0.0118"/>
            <axis xyz="0 1 0" />
            <limit
                    lower="${-math_pi_over_4}"
                    upper="${math_pi_over_4}"
                    effort="100.0"
                    velocity="100.0" />
            <parent link="base_link" />
            <child link="${lat_label}_rocker_link" />
        </joint>

        <gazebo reference="${lat_label}_rocker_joint">
            <provideFeedback>true</provideFeedback>
            <implicitSpringDamper>true</implicitSpringDamper>
            <!-- <springStiffness>100.0</springStiffness> -->
            <!-- <springReference>0.0</springReference> -->
        </gazebo>
    </xacro:macro>
    <!-- Fixed Rocker Joint (for testing)  -->
    <!-- <xacro:macro name="rocker_joint" params="lat_label reflect">
        <joint name="${lat_label}_rocker_joint" type="fixed">
            <origin rpy="0 0 0" xyz="0.071 ${reflect * 0.154} 0.0118"/>
            <parent link="base_link" />
            <child link="${lat_label}_rocker_link" />
        </joint>

        <gazebo reference="${lat_label}_rocker_joint">
            <disableFixedJointLumping>true</disableFixedJointLumping> 
            <preserveFixedJoint>true</preserveFixedJoint>
        </gazebo>
    </xacro:macro> -->
    <xacro:rocker_joint lat_label="left" reflect="1"/>
    <xacro:rocker_joint lat_label="right" reflect="-1"/>

    <xacro:macro name="corner_link" params="lon_label lat_label reflect">
        <link name="${lon_label}_${lat_label}_corner_link">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <mesh filename="file://$(find curio_description)/meshes/bases/${lon_label}_${lat_label}_steering_asm.stl" />
                    <!-- <box size="0.1 0.1 0.1"/> -->
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <box size="0.1 0.1 0.1"/>
                </geometry>
            </collision>
            <xacro:solid_cuboid_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="0.25"
                    x="0.1" y="0.1" z="0.1" />
        </link>

        <gazebo reference="${lon_label}_${lat_label}_corner_link">
            <material>Gazebo/Gray</material>
        </gazebo>
    </xacro:macro>
    <xacro:corner_link lon_label="front" lat_label="left" reflect="1"/>
    <xacro:corner_link lon_label="front" lat_label="right" reflect="-1"/>

    <xacro:macro name="front_corner_joint" params="lat_label reflect">
        <joint name="front_${lat_label}_corner_joint" type="continuous">
            <origin rpy="0 0 0" xyz="0.2116 ${reflect * 0.075} -0.0279"/>
            <axis xyz="0 0 1" />
            <parent link="${lat_label}_rocker_link" />
            <child link="front_${lat_label}_corner_link" />
        </joint>

        <transmission name="front_${lat_label}_corner_transmission" >
            <type>transmission_interface/SimpleTransmission</type>
            <actuator name="front_${lat_label}_corner_actuator">
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            <joint name="front_${lat_label}_corner_joint">
                <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
            </joint>
        </transmission>

        <gazebo reference="front_${lat_label}_corner_joint">
            <provideFeedback>true</provideFeedback>
        </gazebo>
    </xacro:macro>
    <xacro:front_corner_joint lat_label="left" reflect="1"/>
    <xacro:front_corner_joint lat_label="right" reflect="-1"/>

    <xacro:macro name="wheel_link" params="lon_label lat_label reflect">
        <link name="${lon_label}_${lat_label}_wheel_link">
            <visual>
                <origin rpy="${reflect * math_pi_over_2} 0 0" xyz="0 0 0" />
                <geometry>
                    <mesh filename="file://$(find curio_description)/meshes/wheels/wheel_asm.stl" />
                </geometry>
                <material name="dark_gray" />
            </visual>
            <collision>
                <origin rpy="${reflect * math_pi_over_2} 0 0" xyz="0 0 0" />
                <geometry>
                    <cylinder length="${wheel_width}" radius="${wheel_radius}" />
                </geometry>
            </collision>
            <xacro:solid_cylinder_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="0.25"
                    radius="${wheel_radius}" length="${wheel_width}" />
        </link>

        <gazebo reference="${lon_label}_${lat_label}_wheel_link">
            <material>Gazebo/DarkGray</material>
        </gazebo>
    </xacro:macro>
    <xacro:wheel_link lon_label="front" lat_label="left" reflect="1"/>
    <xacro:wheel_link lon_label="front" lat_label="right" reflect="-1"/>

    <xacro:macro name="corner_wheel_joint" params="lon_label lat_label reflect">
        <joint name="${lon_label}_${lat_label}_wheel_joint" type="continuous">
            <origin rpy="0 0 0" xyz="0 0 -0.132"/>
            <axis xyz="0 1 0" />
            <parent link="${lon_label}_${lat_label}_corner_link" />
            <child link="${lon_label}_${lat_label}_wheel_link" />
        </joint>

        <transmission name="${lon_label}_${lat_label}_wheel_transmission" >
            <type>transmission_interface/SimpleTransmission</type>
            <actuator name="${lon_label}_${lat_label}_wheel_actuator">
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            <joint name="${lon_label}_${lat_label}_wheel_joint">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
        </transmission>

        <gazebo reference="${lon_label}_${lat_label}_wheel_joint">
            <provideFeedback>true</provideFeedback>
        </gazebo>
    </xacro:macro>
    <xacro:corner_wheel_joint lon_label="front" lat_label="left" reflect="1"/>
    <xacro:corner_wheel_joint lon_label="front" lat_label="right" reflect="-1"/>

    <!-- Bogie -->
    <xacro:macro name="bogie_link" params="lat_label reflect">
        <link name="${lat_label}_bogie_link">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <mesh filename="file://$(find curio_description)/meshes/bases/${lat_label}_bogie_asm.stl" />
                    <!-- <box size="0.1 0.015 0.015"/> -->
                </geometry>
                <material name="gray" />
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0 0 0" />
                <geometry>
                    <box size="0.1 0.015 0.015"/>
                </geometry>
            </collision>
            <xacro:solid_cuboid_inertial
                    rpy="0 0 0" xyz="0 0 0"
                    mass="0.25"
                    x="0.1" y="0.015" z="0.015" />
        </link>

        <gazebo reference="${lat_label}_bogie_link">
            <material>Gazebo/Gray</material>
        </gazebo>
    </xacro:macro>
    <xacro:bogie_link lat_label="left" reflect="1"/>
    <xacro:bogie_link lat_label="right" reflect="-1"/>

    <!-- Bogie Joint  -->
    <xacro:macro name="bogie_joint" params="lat_label reflect">
        <joint name="${lat_label}_bogie_joint" type="revolute">
            <origin rpy="0 0 0" xyz="-0.181 ${reflect * 0.025} -0.062"/>
            <axis xyz="0 1 0" />
            <limit
                    lower="${-math_pi_over_4}"
                    upper="${math_pi_over_4}"
                    effort="100.0"
                    velocity="100.0" />
            <parent link="${lat_label}_rocker_link" />
            <child link="${lat_label}_bogie_link" />
        </joint>

        <gazebo reference="${lat_label}_bogie_joint">
            <provideFeedback>true</provideFeedback>
            <implicitSpringDamper>true</implicitSpringDamper>
            <!-- <springStiffness>0.0</springStiffness> -->
            <!-- <springReference>0.0</springReference> -->
        </gazebo>
    </xacro:macro>
    <!-- Fixed Bogie Joint  (for testing) -->
    <!-- <xacro:macro name="bogie_joint" params="lat_label reflect">
        <joint name="${lat_label}_bogie_joint" type="fixed">
            <origin rpy="0 0 0" xyz="-0.181 ${reflect * 0.0675} -0.062"/>
            <parent link="${lat_label}_rocker_link" />
            <child link="${lat_label}_bogie_link" />
        </joint>

        <gazebo reference="${lat_label}_bogie_joint">
            <disableFixedJointLumping>true</disableFixedJointLumping> 
            <preserveFixedJoint>true</preserveFixedJoint>
        </gazebo>
    </xacro:macro> -->
    <xacro:bogie_joint lat_label="left" reflect="1"/>
    <xacro:bogie_joint lat_label="right" reflect="-1"/>

    <xacro:wheel_link lon_label="mid" lat_label="left" reflect="1"/>
    <xacro:wheel_link lon_label="mid" lat_label="right" reflect="-1"/>

    <xacro:macro name="mid_wheel_joint" params="lat_label reflect">
        <joint name="mid_${lat_label}_wheel_joint" type="continuous">
            <origin rpy="0 0 0" xyz="0.1063 ${reflect * 0.0929} -0.0959"/>
            <axis xyz="0 1 0" />
            <parent link="${lat_label}_bogie_link" />
            <child link="mid_${lat_label}_wheel_link" />
        </joint>

        <transmission name="mid_${lat_label}_wheel_transmission" >
            <type>transmission_interface/SimpleTransmission</type>
            <actuator name="mid_${lat_label}_wheel_actuator">
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            <joint name="mid_${lat_label}_wheel_joint">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
        </transmission>

        <gazebo reference="mid_${lat_label}_wheel_joint">
            <provideFeedback>true</provideFeedback>
        </gazebo>
    </xacro:macro>
    <xacro:mid_wheel_joint lat_label="left" reflect="1"/>
    <xacro:mid_wheel_joint lat_label="right" reflect="-1"/>

    <xacro:corner_link lon_label="back" lat_label="left" reflect="1"/>
    <xacro:corner_link lon_label="back" lat_label="right" reflect="-1"/>

    <xacro:macro name="back_corner_joint" params="lat_label reflect">
        <joint name="back_${lat_label}_corner_joint" type="continuous">
            <origin rpy="0 0 0" xyz="-0.149 ${reflect * 0.05} 0.0338"/>
            <axis xyz="0 0 1" />
            <parent link="${lat_label}_bogie_link" />
            <child link="back_${lat_label}_corner_link" />
        </joint>

        <transmission name="back_${lat_label}_corner_transmission" >
            <type>transmission_interface/SimpleTransmission</type>
            <actuator name="back_${lat_label}_corner_actuator">
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
            <joint name="back_${lat_label}_corner_joint">
                <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
            </joint>
        </transmission>

        <gazebo reference="back_${lat_label}_corner_joint">
            <provideFeedback>true</provideFeedback>
        </gazebo>
    </xacro:macro>
    <xacro:back_corner_joint lat_label="left" reflect="1"/>
    <xacro:back_corner_joint lat_label="right" reflect="-1"/>

    <xacro:wheel_link lon_label="back" lat_label="left" reflect="1"/>
    <xacro:wheel_link lon_label="back" lat_label="right" reflect="-1"/>

    <xacro:corner_wheel_joint lon_label="back" lat_label="left" reflect="1"/>
    <xacro:corner_wheel_joint lon_label="back" lat_label="right" reflect="-1"/>

    <!-- Scan Sensor: Select One Option Based on sensor_type xacro parameter {RPLidar, PuckLITE, D435i, L515} -->
    <xacro:if value="${sensor_type == 'RPLidar'}">
        <xacro:laser_link_2d x="0.152" y="0.078" z="0.050" />
    </xacro:if>
    <xacro:if value="${sensor_type == 'PuckLITE'}">
        <xacro:laser_link_3d x="0.0" y="0.0" z="${body_mast_length/2}" />
    </xacro:if>
    <xacro:if value="${sensor_type == 'D435i'}">
        <xacro:realsense_d435i x="0.0" y="0.0" z="${body_mast_length/2}" />
    </xacro:if>
    <xacro:if value="${sensor_type == 'L515'}">
        <xacro:realsense_l515 x="0.0" y="0.0" z="${body_mast_length/2}" />
    </xacro:if>

</robot>
